#!/usr/bin/python3

import os

def extractstrings(fullpath):
    """
    Execute linux `strings` on `fullpath` sample

    Args:
        fullpath: absolute path of malware sample

    Raises:
        None

    Returns:
        strings: unique `strings` output for sample
    """

    # Run strings command and read in its output
    strings = os.popen("strings '{0}'".format(fullpath)).read()
    # Extract unique strings
    strings = set(strings.split("\n"))
    # Put attributes in dictionary with feature name as key

    return strings

#def getprocessinfo(taskreportjson, processid):
#    """
#    """
#
#    for processinfo in taskreportjson['behavior']['generic']:
#        if int(processinfo['pid']) == int(processid):
#            return processinfo['process_name'], processinfo['process_path'], \
#                   processinfo['first_seen']

#def getprocessapicalls(taskreportjson, processid):
#    """
#    """
#
#    for pid in taskreportjson['behavior']['apistats']:
#        if pid == processid:
#            return list(taskreportjson['behavior']['apistats'][pid].keys())

#def extractapis(taskidslist, apicallsdict, taskreportjson, feature):
#    """
#    """
#
#    attributes = {'apis': {}}
#
#    for processid in apicallsdict:
#        if processid not in attributes['apis']:
#            attributes['apis'][processid] = {}
#
#        # Get process name, path and first_seen time for `processid`
#        attributes['apis'][processid]['name'], attributes['apis'][processid]['path'], \
#        attributes['apis'][processid]['creation'] = getprocessinfo(taskreportjson, processid)
#
#        # Get dynamic API calls for processid
#        attributes['apis'][processid]['apicalls'] = getprocessapicalls(taskreportjson, processid)
#
#    return attributes
 
#def getattributes(args, feature='strings'):
#    """
#    Returns the specified attribute of the malware sample
#
#    Args:
#        args: relevant parameters for feature extraction in a list
#        feature: the attribute to extract
#    Raises:
#        Exception if unhandleable feature is requested
#    Returns:
#        dictionary containing keys as attribute name and 
#        values as attribute values
#    """
#
#    # Handler for extracting strings attribute
#    if feature == 'strings':
#        return extractstrings(args[0], 'strings')
#    # Handler for extracting API information from cuckoo reports
#    elif feature == 'apis':
#        return extractapis(args[0], args[1], args[2], 'apis')
#    # Attribute handler not available. Raise exception
#    else:
#        raise Exception("Attribute extraction currently not handleable...")
