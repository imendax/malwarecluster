#!/usr/bin/python3

"""
Copyright (c) 2015, Joshua Saxe
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name 'Joshua Saxe' nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL JOSHUA SAXE BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

import os

def extractstrings(fullpath):
    """
    Execute linux `strings` on `fullpath` sample

    Args:
        fullpath: absolute path of malware sample

    Raises:
        None

    Returns:
        strings: unique `strings` output for sample
    """

    # Run strings command and read in its output
    strings = os.popen("strings '{0}'".format(fullpath)).read()
    # Extract unique strings
    strings = set(strings.split("\n"))
    # Put attributes in dictionary with feature name as key

    return strings

#def getprocessinfo(taskreportjson, processid):
#    """
#    """
#
#    for processinfo in taskreportjson['behavior']['generic']:
#        if int(processinfo['pid']) == int(processid):
#            return processinfo['process_name'], processinfo['process_path'], \
#                   processinfo['first_seen']

#def getprocessapicalls(taskreportjson, processid):
#    """
#    """
#
#    for pid in taskreportjson['behavior']['apistats']:
#        if pid == processid:
#            return list(taskreportjson['behavior']['apistats'][pid].keys())

#def extractapis(taskidslist, apicallsdict, taskreportjson, feature):
#    """
#    """
#
#    attributes = {'apis': {}}
#
#    for processid in apicallsdict:
#        if processid not in attributes['apis']:
#            attributes['apis'][processid] = {}
#
#        # Get process name, path and first_seen time for `processid`
#        attributes['apis'][processid]['name'], attributes['apis'][processid]['path'], \
#        attributes['apis'][processid]['creation'] = getprocessinfo(taskreportjson, processid)
#
#        # Get dynamic API calls for processid
#        attributes['apis'][processid]['apicalls'] = getprocessapicalls(taskreportjson, processid)
#
#    return attributes
 
#def getattributes(args, feature='strings'):
#    """
#    Returns the specified attribute of the malware sample
#
#    Args:
#        args: relevant parameters for feature extraction in a list
#        feature: the attribute to extract
#    Raises:
#        Exception if unhandleable feature is requested
#    Returns:
#        dictionary containing keys as attribute name and 
#        values as attribute values
#    """
#
#    # Handler for extracting strings attribute
#    if feature == 'strings':
#        return extractstrings(args[0], 'strings')
#    # Handler for extracting API information from cuckoo reports
#    elif feature == 'apis':
#        return extractapis(args[0], args[1], args[2], 'apis')
#    # Attribute handler not available. Raise exception
#    else:
#        raise Exception("Attribute extraction currently not handleable...")
