#!/usr/bin/python3

def jaccard(arg1, arg2, feature='strings'):
    """
    Compute the jaccard index between two arguments (lists | sets) by taking
    their intersection, union and then dividing the number of elements in the
    intersection by the number of elements in their union.

    Args:
        arg1: attributes of malware 1
        arg2: attributes of malware 2

    Raises:
        None

    Returns:
        jaccard index value
    """

    if feature == 'api':
        # Input args will be lists
        list1 = arg1
        list2 = arg2

        # Counters for keeping track of common hashes and unique hashes
        unionlen = float(0)
        intersectionlen = float(0)

        # For two exe samples to be similar, the order of dynamic API calls
        # is relevant and important
        for hash1, hash2 in zip(list1, list2):
            if hash1 == hash2:
                # Hash match, increment `intersectionlen`
                intersectionlen = intersectionlen + 1
                # One unique hash between the two samples, increment `unionlen`
                unionlen = unionlen + 1
            else:
                # Two unique hashes between the two samples, increment
                # `unionlen` by 2
                unionlen = unionlen + 2

        # Extra hashes are unique hashes, so increment `unionlen` by equivalent
        # number
        if len(list1) != len(list2):
            unionlen = unionlen + abs(len(list1) - len(list2))

        return intersectionlen / unionlen
    elif feature == 'strings':
        # Input args will be sets
        set1 = arg1
        set2 = arg2

        # Calculate intersection and union between two sets. Order is not
        # relevant
        intersection = set1 & set2
        intersectionlength = float(len(intersection))
        union = set1 | set2
        unionlength = float(len(union))

        return intersectionlength / unionlength
    else:
        raise Exception("Feature not supported. Jaccard index could not be calculated!")
