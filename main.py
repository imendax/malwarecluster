#!/usr/bin/python3

"""
Copyright (c) 2015, Joshua Saxe
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name 'Joshua Saxe' nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL JOSHUA SAXE BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

import os
from acceptarguments import parseargs

def printexecinfo(args):
    """
    Prints the overall summary of current execution

    Args:
        args: command line args

    Raises:
    Returns:
        None
    """

    print ("[+] Execution summary:")

    print ("      Malware samples are being loaded from: " + args.malwaredir)

    if args.load:
        print ("      Malware features will be extracted, stored in samples.db and analyzed in cuckoo")

    if args.network:
        print ("      Malware features will be used to construct a malware network graph")

    if args.wipe:
        print ("     samples.db will be deleted")

    print ("      Jaccard index threshold for non-exe samples: " + str(args.nethreshold))
    print ("      Jaccard index threshold for exe samples: " + str(args.ethreshold))
    print ("      n-gram: " + str(args.ngram))
    print ("      Output NetworkX graph file: " + args.outputdotfile)

def domagic(args):
    """
    Store malware features / cluster malware

    Args:
        args: command line args

    Raises:
    Returns:
        None
    """

    printexecinfo(args)

    # Handler for when user wants to load malware into the database
    # or wants to analyze the existing malware samples and build a
    # malware network graph
    if args.load or args.network:
        malwarepaths = []
        malwareattributes = dict()
        malwaredir = args.malwaredir
 
        # Walk malware base directory tree and store all file paths
        for root, dirs, paths in os.walk(malwaredir):
            for path in paths:
                fullpath = os.path.join(root, path)
                malwarepaths.append(fullpath)

        # Handler for when user user wants to load non-exe files info into
        # the database and analyze PE files in cuckoo
        if args.load:
            from storesample import store
            store(malwarepaths)

        # Handler for when user wants to analyze available malware features
        # to build a malware network
        elif args.network:
            from malnet import network
            network(malwarepaths, args.nethreshold, args.ethreshold, \
                    args.ngram, args.outputdotfile)

    # Handler for when user wants to reset the database, or in other
    # words delete the shelve database file, samples.db
    elif args.wipe:
        from wipedatabase import wipe
        wipe()

def main():
    # Get command line arguments
    args = parseargs()

    # Do magic
    domagic(args)

if __name__ == '__main__':
    main()
