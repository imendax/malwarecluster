#!/usr/bin/python3

"""
Copyright (c) 2015, Joshua Saxe
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name 'Joshua Saxe' nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL JOSHUA SAXE BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

import os
import shelve

def pecheck(fullpath):
    """
    Do a cursory sanity check to make sure 'fullpath' is
    a Windows PE executable (PE executables start with the
    two bytes 'MZ')

    # Windows Installer package (starting with 'd0cf11e0a1b11ae1') don't seem
    # to execute on Cuckoo

    Args:
        fullpath: absolute path of malware sample

    Raises:
        None

    Returns:
        True if PE file
    """

    with open(fullpath, 'rb') as f:
        contents = f.read(2)
        if contents == b'MZ':
            # PE executable
            return True
        #elif contents == b'\xd0\xcf':
        #    if f.read(6) == b'\x11\xe0\xa1\xb1\x1a\xe1':
        #        # Windows installer package
        #        return True

    return False

def readthresholds(filename):
    """
    Reads Jaccard Index threshold values for different file types from
    `filename` and returns a dict

    Args:
        fullname: Absolute path to file containing Jaccard Index threshold values

    Raises:
        None

    Returns:
        thresholddict: dict containing Jaccard Index threshold values based on
                       file types
    """

    thresholddict = {}

    with open(filename, 'r') as f:
        for line in f.readlines():
            filetype, value = line.split(',')
            thresholddict[filetype] = float(value.strip())

    return thresholddict

def comparefiletypes(filetype1, filetype2):
    """
    Compare file types and return True if they are compatible with each other

    Args:
        filetype1:
        filetype2:

    Raises:
        None

    Return
        True, if compatible file types
    """

    if filetype1 == filetype2:
        return True

    if filetype1 == 'application/msword' or \
       filetype1 == 'application/vnd.openxmlformats-officedocument.wordprocessingml.document':
        if filetype2 == 'application/msword' or \
           filetype2 == 'application/vnd.openxmlformats-officedocument.wordprocessingml.document':
            return True

    return False

def readids():
    """
    Reads `taskids` and `errorids` file and returns a list of
    task ids and error ids from previous cuckoo dispatch

    Args:
    Raises:
        None

    Returns:
        taskids:  list of task ids
        errorids: list of error ids
    """

    taskids = None
    errorids = None

    if os.path.exists('taskids') and os.path.isfile('taskids'):
        with open('taskids', 'r') as f:
            taskids = f.read().split(',')
    else:
        taskids = []

    if os.path.exists('errorids') and os.path.isfile('errorids'):
        with open('errorids', 'r') as f:
            errorids = f.read().split(',')
    else:
        errorids = []

    return taskids, errorids

def getdatabase():
    """
    Returns shelve db object

    Args:
        None
    Raises:
        None
    Returns:
        shelve db object
    """

    # Build absolute path to samples.db file
    # It exists in the same directory as auxiliary.py
    #dbpath = "/".join(__file__.split('/')[:-1] + ['samples.db'])

    return shelve.open('samples.db', writeback=True)
